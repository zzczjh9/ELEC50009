
hello_world_sw.elf:     file format elf32-littlenios2
hello_world_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000002fc memsz 0x000002fc flags r-x
    LOAD off    0x0000131c vaddr 0x0001031c paddr 0x00010320 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001324 vaddr 0x00010324 paddr 0x00010324 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001320  2**0
                  CONTENTS
  2 .text         00000254  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a8  00010274  00010274  00001274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0001031c  00010320  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00010324  00010324  00001324  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010330  00010330  00001320  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000168  00000000  00000000  00001348  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000b8b  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000664  00000000  00000000  0000203b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000075d  00000000  00000000  0000269f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000190  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000005de  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000123  00000000  00000000  0000356a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003690  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000036a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004536  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00004539  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000453c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000453d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000453e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00004542  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00004546  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0000454a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00004553  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  00004565  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000032  00000000  00000000  00004572  2**0
                  CONTENTS, READONLY
 29 .jdi          00004a75  00000000  00000000  000045a4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006568c  00000000  00000000  00009019  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010274 l    d  .rodata	00000000 .rodata
0001031c l    d  .rwdata	00000000 .rwdata
00010324 l    d  .bss	00000000 .bss
00010330 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_sw_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 DE_hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
0001018c g     F .text	0000002c alt_main
00010320 g       *ABS*	00000000 __flash_rwdata_start
000101b8 g     F .text	00000038 alt_putstr
0001031c g     O .rwdata	00000004 jtag_uart
00010250 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010328 g     O .bss	00000004 alt_argv
0001831c g       *ABS*	00000000 _gp
00010330 g       *ABS*	00000000 __bss_end
00010248 g     F .text	00000004 alt_dcache_flush_all
00010320 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001031c g       *ABS*	00000000 __ram_rodata_end
00010330 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010214 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
00010210 g     F .text	00000004 alt_sys_init
0001031c g       *ABS*	00000000 __ram_rwdata_start
00010274 g       *ABS*	00000000 __ram_rodata_start
00010330 g       *ABS*	00000000 __alt_stack_base
00010324 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000050 main
00010324 g     O .bss	00000004 alt_envp
00010274 g       *ABS*	00000000 __flash_rodata_start
000101f0 g     F .text	00000020 alt_irq_init
0001032c g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010320 g       *ABS*	00000000 _edata
00010330 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010258 g     F .text	0000001c strlen
0001024c g     F .text	00000004 alt_icache_flush_all
000100ac g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a0c714 	ori	gp,gp,33564
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	1080c914 	ori	r2,r2,804

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c0cc14 	ori	r3,r3,816

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00100ac0 	call	100ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	001018c0 	call	1018c <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <main>:
#include "system.h"

int main()
{
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
   1005c:	01000074 	movhi	r4,1
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int main()
{
   10060:	deffff04 	addi	sp,sp,-4
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
   10064:	21009d04 	addi	r4,r4,628
#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"

int main()
{
   10068:	dfc00015 	stw	ra,0(sp)
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
   1006c:	00101b80 	call	101b8 <alt_putstr>
	alt_putstr("When you press Push Button 0,1 the switching on of the LEDs is done by software\n");
   10070:	01000074 	movhi	r4,1
   10074:	2100a304 	addi	r4,r4,652
   10078:	00101b80 	call	101b8 <alt_putstr>
	alt_putstr("But, Switching on/off of LED 2 by SW 2 is done by hardware\n");
   1007c:	01000074 	movhi	r4,1
   10080:	2100b804 	addi	r4,r4,736
   10084:	00101b80 	call	101b8 <alt_putstr>
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10088:	010000b4 	movhi	r4,2
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b0000000011);
		//Send the data to the LED
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   1008c:	00c000b4 	movhi	r3,2
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10090:	21042004 	addi	r4,r4,4224
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b0000000011);
		//Send the data to the LED
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   10094:	18c41804 	addi	r3,r3,4192
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10098:	20800037 	ldwio	r2,0(r4)
   1009c:	0084303a 	nor	r2,zero,r2
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b0000000011);
		//Send the data to the LED
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   100a0:	108000cc 	andi	r2,r2,3
   100a4:	18800035 	stwio	r2,0(r3)
   100a8:	003ffb06 	br	10098 <main+0x3c>

000100ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100ac:	deffff04 	addi	sp,sp,-4
   100b0:	01000074 	movhi	r4,1
   100b4:	01400074 	movhi	r5,1
   100b8:	dfc00015 	stw	ra,0(sp)
   100bc:	2100c704 	addi	r4,r4,796
   100c0:	2940c804 	addi	r5,r5,800

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   100c4:	2140061e 	bne	r4,r5,100e0 <alt_load+0x34>
   100c8:	01000074 	movhi	r4,1
   100cc:	01400074 	movhi	r5,1
   100d0:	21000804 	addi	r4,r4,32
   100d4:	29400804 	addi	r5,r5,32
   100d8:	2140121e 	bne	r4,r5,10124 <alt_load+0x78>
   100dc:	00000b06 	br	1010c <alt_load+0x60>
   100e0:	00c00074 	movhi	r3,1
   100e4:	18c0c804 	addi	r3,r3,800
   100e8:	1907c83a 	sub	r3,r3,r4
   100ec:	0005883a 	mov	r2,zero
  {
    while( to != end )
   100f0:	10fff526 	beq	r2,r3,100c8 <alt_load+0x1c>
    {
      *to++ = *from++;
   100f4:	114f883a 	add	r7,r2,r5
   100f8:	39c00017 	ldw	r7,0(r7)
   100fc:	110d883a 	add	r6,r2,r4
   10100:	10800104 	addi	r2,r2,4
   10104:	31c00015 	stw	r7,0(r6)
   10108:	003ff906 	br	100f0 <alt_load+0x44>
   1010c:	01000074 	movhi	r4,1
   10110:	01400074 	movhi	r5,1
   10114:	21009d04 	addi	r4,r4,628
   10118:	29409d04 	addi	r5,r5,628

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1011c:	2140101e 	bne	r4,r5,10160 <alt_load+0xb4>
   10120:	00000b06 	br	10150 <alt_load+0xa4>
   10124:	00c00074 	movhi	r3,1
   10128:	18c00804 	addi	r3,r3,32
   1012c:	1907c83a 	sub	r3,r3,r4
   10130:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10134:	10fff526 	beq	r2,r3,1010c <alt_load+0x60>
    {
      *to++ = *from++;
   10138:	114f883a 	add	r7,r2,r5
   1013c:	39c00017 	ldw	r7,0(r7)
   10140:	110d883a 	add	r6,r2,r4
   10144:	10800104 	addi	r2,r2,4
   10148:	31c00015 	stw	r7,0(r6)
   1014c:	003ff906 	br	10134 <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10150:	00102480 	call	10248 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10154:	dfc00017 	ldw	ra,0(sp)
   10158:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1015c:	001024c1 	jmpi	1024c <alt_icache_flush_all>
   10160:	00c00074 	movhi	r3,1
   10164:	18c0c704 	addi	r3,r3,796
   10168:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1016c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10170:	18bff726 	beq	r3,r2,10150 <alt_load+0xa4>
    {
      *to++ = *from++;
   10174:	114f883a 	add	r7,r2,r5
   10178:	39c00017 	ldw	r7,0(r7)
   1017c:	110d883a 	add	r6,r2,r4
   10180:	10800104 	addi	r2,r2,4
   10184:	31c00015 	stw	r7,0(r6)
   10188:	003ff906 	br	10170 <alt_load+0xc4>

0001018c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1018c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10190:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10194:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10198:	00101f00 	call	101f0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1019c:	00102100 	call	10210 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101a0:	d1a00217 	ldw	r6,-32760(gp)
   101a4:	d1600317 	ldw	r5,-32756(gp)
   101a8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   101ac:	dfc00017 	ldw	ra,0(sp)
   101b0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   101b4:	001005c1 	jmpi	1005c <main>

000101b8 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   101b8:	defffe04 	addi	sp,sp,-8
   101bc:	dc000015 	stw	r16,0(sp)
   101c0:	dfc00115 	stw	ra,4(sp)
   101c4:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   101c8:	00102580 	call	10258 <strlen>
   101cc:	01000074 	movhi	r4,1
   101d0:	000f883a 	mov	r7,zero
   101d4:	100d883a 	mov	r6,r2
   101d8:	800b883a 	mov	r5,r16
   101dc:	2100c704 	addi	r4,r4,796
#else
    return fputs(str, stdout);
#endif
#endif
}
   101e0:	dfc00117 	ldw	ra,4(sp)
   101e4:	dc000017 	ldw	r16,0(sp)
   101e8:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   101ec:	00102141 	jmpi	10214 <altera_avalon_jtag_uart_write>

000101f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   101f0:	deffff04 	addi	sp,sp,-4
   101f4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   101f8:	00102500 	call	10250 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   101fc:	00800044 	movi	r2,1
   10200:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10204:	dfc00017 	ldw	ra,0(sp)
   10208:	dec00104 	addi	sp,sp,4
   1020c:	f800283a 	ret

00010210 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10210:	f800283a 	ret

00010214 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10214:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10218:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   1021c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10220:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10224:	2980072e 	bgeu	r5,r6,10244 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10228:	38c00037 	ldwio	r3,0(r7)
   1022c:	18ffffec 	andhi	r3,r3,65535
   10230:	183ffc26 	beq	r3,zero,10224 <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10234:	28c00007 	ldb	r3,0(r5)
   10238:	20c00035 	stwio	r3,0(r4)
   1023c:	29400044 	addi	r5,r5,1
   10240:	003ff806 	br	10224 <altera_avalon_jtag_uart_write+0x10>

  return count;
}
   10244:	f800283a 	ret

00010248 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10248:	f800283a 	ret

0001024c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1024c:	f800283a 	ret

00010250 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10250:	000170fa 	wrctl	ienable,zero
   10254:	f800283a 	ret

00010258 <strlen>:
   10258:	2005883a 	mov	r2,r4
   1025c:	10c00007 	ldb	r3,0(r2)
   10260:	18000226 	beq	r3,zero,1026c <strlen+0x14>
   10264:	10800044 	addi	r2,r2,1
   10268:	003ffc06 	br	1025c <strlen+0x4>
   1026c:	1105c83a 	sub	r2,r2,r4
   10270:	f800283a 	ret
